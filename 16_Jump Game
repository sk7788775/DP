class Solution {
    public boolean canJump(int[] nums) {
        return solve(nums,nums.length-1);
    }
    
    boolean solve(int[] arr,int ind) {
        if(ind==0) return true;
        if(ind<0) return false;
        for(int i=ind-1;i>=0;i--) {
            int d=ind-i;
            if(arr[i]>=d && solve(arr,i))
               return true;
        }
        return false;
    }
}

// OPTIMIZED DP SOLUTION

class Solution {
    
    int[] dp;
    public boolean canJump(int[] nums) {
        dp=new int[nums.length];
        Arrays.fill(dp,-1);
        return (solve(nums,nums.length-1)==1)?true:false;
    }
    
    int solve(int[] arr,int ind) {
        if(ind==0) return 1;
        if(ind<0) return 0;
        if(dp[ind]!=-1)
            return dp[ind];
        for(int i=ind-1;i>=0;i--) {
            int d=ind-i;
            if(arr[i]>=d && solve(arr,i)==1) {
               dp[ind]=1;
               return 1;
            }
        }
        dp[ind]=0;
        return 0;
    }
}
